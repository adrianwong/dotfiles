#!/bin/bash

# Shamelessly ripped from @garybernhardt.
#
# Log output:
#
# * 51c333e    (12 days)    <Gary Bernhardt>    add vim-eunuch
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

HASH="@@yellow%h@@"
RELATIVE_TIME="@@green(%ar)@@"
AUTHOR="@@bluebold<%an>@@"
REFS="@@redbold%d@@"
SUBJECT="%s"

FORMAT="$HASH}$RELATIVE_TIME}$AUTHOR}$REFS $SUBJECT"

ANSI_BLACK='\033[30m'
ANSI_BLACK_BOLD='\033[0;30;1m'
ANSI_RED='\033[31m'
ANSI_RED_BOLD='\033[0;31;1m'
ANSI_GREEN='\033[32m'
ANSI_GREEN_BOLD='\033[0;32;1m'
ANSI_YELLOW='\033[33m'
ANSI_YELLOW_BOLD='\033[0;33;1m'
ANSI_BLUE='\033[34m'
ANSI_BLUE_BOLD='\033[0;34;1m'
ANSI_MAGENTA='\033[35m'
ANSI_MAGENTA_BOLD='\033[0;35;1m'
ANSI_CYAN='\033[36m'
ANSI_CYAN_BOLD='\033[0;36;1m'
ANSI_WHITE='\033[37m'
ANSI_WHITE_BOLD='\033[0;37;1m'
ANSI_RESET='\033[0m'

show_git_head() {
    pretty_git_log -1
    git show -p --pretty="tformat:"
}

pretty_git_log() {
    git log --graph --color=auto --pretty="tformat:${FORMAT}" $* |
        # Replace (2 years ago) with (2 years)
        sed -Ee 's/(^[^<]*) ago\)/\1)/' |
        # Replace (2 years, 5 months) with (2 years)
        sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
        # Line columns up based on } delimiter
        column -s '}' -t |
        # Workaround. Enabling color (via git log --color=always) messes up
        # column alignment. Roll our own implementation that inserts colors
        # after piping to `column`. See:
        # https://stackoverflow.com/questions/46229359/how-to-do-alignment-in-git-logs-with-graph
        colorize_line "@@yellow([a-z0-9]+)@@" $ANSI_YELLOW |
        colorize_line "@@green(\([^)]+\))@@" $ANSI_GREEN |
        colorize_line "@@bluebold(<[^>]+>)@@" $ANSI_BLUE_BOLD |
        colorize_line "@@redbold( \([^)]+\))?@@" $ANSI_MAGENTA_BOLD |
        # Color merge commits specially
        colorize_line "(Merge (branch|remote-tracking branch|pull request) .*$)" $ANSI_RED |
        # Page only if we're asked to
        if [ -n "$GIT_NO_PAGER" ]; then
            cat
        else
            # Page only if needed
            less --quit-if-one-screen --no-init --RAW-CONTROL-CHARS --chop-long-lines
        fi
}

colorize_line() {
    if [ -n "$1" ] && [ -n "$2" ]; then
        sed -Ee "s/$1/$(printf $2)\1$(printf $ANSI_RESET)/"
    else
        echo "usage: colorize_line \"regex\" \"ansi_color_escape_sequence\""
    fi
}

semantic_commit_message() {
    if [ -n "$1" ] && [ -n "$2" ]; then
        git commit --message "$1: $2"
    else
        echo "usage: semantic_commit_message \"type\" \"message\""
    fi
}

push_upstream() {
    typeset REMOTE="origin"

    if [ -n "$1" ]; then
        REMOTE="$1"
    fi

    git push --set-upstream $REMOTE "$(git rev-parse --abbrev-ref HEAD)"
}
