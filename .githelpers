#!/bin/bash

HASH='%C(always,yellow)%h%C(always,reset)'
RELATIVE_TIME='%C(always,green)(%ar)%C(always,reset)'
AUTHOR='%C(always,bold blue)<%an>%C(always,reset)'
REFS='%C(always,bold magenta)%d%C(always,reset)'
SUBJECT='%s'

# The log format uses ¿ characters between each field, and `column` is later
# used to split on them. A ¿ in the commit subject or any other field will
# break this.
FORMAT="$HASH¿$RELATIVE_TIME¿$AUTHOR¿$REFS $SUBJECT"

ANSI_RED='\033[31m'
ANSI_RESET='\033[0m'

show_git_head() {
    pretty_git_log -1
    git show -p --pretty='tformat:'
}

pretty_git_log() {
    git log --graph --color=auto --pretty="tformat:${FORMAT}" $* |
        # The time massaging regexes start with ^[^<]* because that ensures that they
        # only operate before the first "<". That "<" will be the beginning of the
        # author name, ensuring that we don't destroy anything in the commit message
        # that looks like time.
        #
        # Replace (2 years ago) with (2 years)
        sed -Ee 's/(^[^<]*) ago\)/\1)/' |
        # Replace (2 years, 5 months) with (2 years)
        sed -Ee 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
        # Line columns up based on ¿ delimiter
        column -s '¿' -t |
        # Color merge commits specially
        sed -Ee "s/(Merge (branch|remote-tracking branch|pull request) .*$)/$(printf $ANSI_RED)\1$(printf $ANSI_RESET)/" |
        # Page only if we're asked to
        if [ -n "$GIT_NO_PAGER" ]; then
            cat
        else
            # Page only if needed
            less --quit-if-one-screen --no-init --RAW-CONTROL-CHARS --chop-long-lines
        fi
}

semantic_commit_message() {
    if [ -n "$1" ] && [ -n "$2" ]; then
        git commit --message "$1: $2"
    else
        echo 'usage: semantic_commit_message "type" "message"'
    fi
}

push_upstream() {
    typeset REMOTE='origin'

    if [ -n "$1" ]; then
        REMOTE="$1"
    fi

    git push --set-upstream $REMOTE "$(git rev-parse --abbrev-ref HEAD)"
}
